// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cmonbart
SEXP cmonbart(Rcpp::NumericMatrix xm, Rcpp::NumericVector yv, Rcpp::NumericMatrix xpm, double tau, double nu, double lambda, double alpha, double mybeta, int nd, int burn, int m, int nm, int nkeeptrain, int nkeeptest, int nkeeptestme, int nkeeptreedraws, int printevery);
RcppExport SEXP _monbart_cmonbart(SEXP xmSEXP, SEXP yvSEXP, SEXP xpmSEXP, SEXP tauSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP mybetaSEXP, SEXP ndSEXP, SEXP burnSEXP, SEXP mSEXP, SEXP nmSEXP, SEXP nkeeptrainSEXP, SEXP nkeeptestSEXP, SEXP nkeeptestmeSEXP, SEXP nkeeptreedrawsSEXP, SEXP printeverySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xm(xmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xpm(xpmSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mybeta(mybetaSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type nm(nmSEXP);
    Rcpp::traits::input_parameter< int >::type nkeeptrain(nkeeptrainSEXP);
    Rcpp::traits::input_parameter< int >::type nkeeptest(nkeeptestSEXP);
    Rcpp::traits::input_parameter< int >::type nkeeptestme(nkeeptestmeSEXP);
    Rcpp::traits::input_parameter< int >::type nkeeptreedraws(nkeeptreedrawsSEXP);
    Rcpp::traits::input_parameter< int >::type printevery(printeverySEXP);
    rcpp_result_gen = Rcpp::wrap(cmonbart(xm, yv, xpm, tau, nu, lambda, alpha, mybeta, nd, burn, m, nm, nkeeptrain, nkeeptest, nkeeptestme, nkeeptreedraws, printevery));
    return rcpp_result_gen;
END_RCPP
}
// cpmonbart
SEXP cpmonbart(Rcpp::NumericMatrix xm, Rcpp::NumericVector yv, Rcpp::NumericMatrix xpm, double tau, double alpha, double mybeta, double binaryOffset, int nd, int burn, int m, int nm, int nkeeptrain, int nkeeptest, int nkeeptestme, int nkeeptreedraws, int printevery);
RcppExport SEXP _monbart_cpmonbart(SEXP xmSEXP, SEXP yvSEXP, SEXP xpmSEXP, SEXP tauSEXP, SEXP alphaSEXP, SEXP mybetaSEXP, SEXP binaryOffsetSEXP, SEXP ndSEXP, SEXP burnSEXP, SEXP mSEXP, SEXP nmSEXP, SEXP nkeeptrainSEXP, SEXP nkeeptestSEXP, SEXP nkeeptestmeSEXP, SEXP nkeeptreedrawsSEXP, SEXP printeverySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xm(xmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yv(yvSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xpm(xpmSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mybeta(mybetaSEXP);
    Rcpp::traits::input_parameter< double >::type binaryOffset(binaryOffsetSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type nm(nmSEXP);
    Rcpp::traits::input_parameter< int >::type nkeeptrain(nkeeptrainSEXP);
    Rcpp::traits::input_parameter< int >::type nkeeptest(nkeeptestSEXP);
    Rcpp::traits::input_parameter< int >::type nkeeptestme(nkeeptestmeSEXP);
    Rcpp::traits::input_parameter< int >::type nkeeptreedraws(nkeeptreedrawsSEXP);
    Rcpp::traits::input_parameter< int >::type printevery(printeverySEXP);
    rcpp_result_gen = Rcpp::wrap(cpmonbart(xm, yv, xpm, tau, alpha, mybeta, binaryOffset, nd, burn, m, nm, nkeeptrain, nkeeptest, nkeeptestme, nkeeptreedraws, printevery));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _monbart_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_monbart_cmonbart", (DL_FUNC) &_monbart_cmonbart, 17},
    {"_monbart_cpmonbart", (DL_FUNC) &_monbart_cpmonbart, 16},
    {"_monbart_rcpp_hello_world", (DL_FUNC) &_monbart_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_monbart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
